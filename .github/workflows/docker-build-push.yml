name: Build and Deploy Counter Service

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Configure AWS credentials for the GitHub Actions environment
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Login to Amazon ECR using the AWS CLI command
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
      
    # Build, tag, and push the Docker image to Amazon ECR
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        ECR_REPOSITORY: counter-service
        IMAGE_TAG: 'latest'
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Install kubectl for Kubernetes management
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    # Configure kubectl to use the EKS cluster
    - name: Configure kubectl
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name my-cluster-1
    
    # Debugging steps to verify kubeconfig and connectivity
    - name: Get kubeconfig details
      run: cat $HOME/.kube/config

    - name: Check kubectl connectivity
      run: kubectl cluster-info
      
    # Validate Kubernetes YAML files
    - name: Validate Kubernetes YAML files
      run: |
        kubectl apply --dry-run=client -f k8s/namespaces.yaml --validate=false
        kubectl apply --dry-run=client -f k8s/deployment.yaml --validate=false
        kubectl apply --dry-run=client -f k8s/service.yaml --validate=false

    # Bonus: Validate Terraform configuration
    - name: Validate Terraform configuration
      run: |
        terraform init
        terraform validate

    # Deploy the application to Kubernetes
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
